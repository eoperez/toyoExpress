// Getting Angular Material them 
@import '../node_modules/@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$my-app-primary: mat-palette($mat-teal);
$my-app-accent:  mat-palette($mat-cyan, A200, A100, A400);

// The warn palette is optional (defaults to red).
$my-app-warn:    mat-palette($mat-red);

// Create the theme object (a Sass map containing all of the palettes).
$my-app-theme: mat-light-theme($my-app-primary, $my-app-accent, $my-app-warn);

@mixin mat-sort-theme($theme) {
    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);
  
    .mat-sort-header-arrow {
      // Because the arrow is made up of multiple elements that are stacked on top of each other,
      // we can't use the semi-trasparent color from the theme directly. We convert it into a solid
      // color by taking the opacity from the rgba value and using the value to determine the
      // percentage of the background to put into foreground when mixing the colors together.
      $table-background: mat-color($background, 'card');
      $text-color: mat-color($foreground, secondary-text);
      $text-opacity: opacity($text-color);
      color: #45F0DF;
    }
  }

  @mixin mat-table-theme($theme) {
    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);
  
    .mat-table {
      background: mat-color($background, 'card');
    }
  
    .mat-table thead, .mat-table tbody, .mat-table tfoot,
    mat-header-row, mat-row, mat-footer-row,
    [mat-header-row], [mat-row], [mat-footer-row],
    .mat-table-sticky {
      background: inherit;
    }
  
    mat-row, mat-header-row, mat-footer-row,
    th.mat-header-cell, td.mat-cell, td.mat-footer-cell {
      border-bottom-color: mat-color($foreground, divider);
    }
  
    .mat-header-cell {
      color: white;
    }
  
    .mat-cell, .mat-footer-cell {
      color: mat-color($foreground, text);
    }
  }
  
  @mixin mat-table-typography($config) {
    .mat-table {
      font-family: mat-font-family($config);
    }
  
    .mat-header-cell {
      font-size: 1em;
      font-weight: mat-font-weight($config, body+1);
    }
  
    .mat-cell, .mat-footer-cell {
      font-size: mat-font-size($config, body-1);
    }
  }
  @mixin mat-checkbox-theme($theme) {
    $is-dark-theme: map-get($theme, is-dark);
    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);
    $warn: map-get($theme, warn);
    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);
  
  
    // The color of the checkbox's checkmark / mixedmark.
    $checkbox-mark-color: mat-color($background, background);
  
    // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,
    // this does not work well with elements layered on top of one another. To get around this we
    // blend the colors together based on the base color and the theme background.
    $white-30pct-opacity-on-dark: #686868;
    $black-26pct-opacity-on-light: #b0b0b0;
    $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);
  
    .mat-checkbox-frame {
      border-color: darkgray;
    }
  
    .mat-checkbox-checkmark {
      fill: darkgray;
    }
  
    .mat-checkbox-checkmark-path {
      // !important is needed here because a stroke must be set as an
      // attribute on the SVG in order for line animation to work properly.
      stroke: #F9DC5C !important;
  
      @include cdk-high-contrast(black-on-white) {
        // Having the one above be !important ends up overriding the browser's automatic
        // color inversion so we need to re-invert it ourselves for black-on-white.
        stroke: #000 !important;
      }
    }
  
    .mat-checkbox-mixedmark {
      background-color: darkgray;
    }
  
    .mat-checkbox-indeterminate, .mat-checkbox-checked {
      &.mat-primary .mat-checkbox-background {
        background-color: mat-color($primary);
      }
  
      &.mat-accent .mat-checkbox-background {
        background-color: #757575;
      }
  
      &.mat-warn .mat-checkbox-background {
        background-color: mat-color($warn);
      }
    }
  
    .mat-checkbox-disabled {
      &.mat-checkbox-checked:not(.mat-checkbox-indeterminate) {
        .mat-checkbox-background {
          background-color: $disabled-color;
        }
      }
  
      &:not(.mat-checkbox-checked) {
        .mat-checkbox-frame {
          border-color: $disabled-color;
        }
      }
  
      .mat-checkbox-label {
        color: mat-color($foreground, secondary-text);
      }
  
      @include cdk-high-contrast {
        opacity: 0.5;
      }
    }
  
    // This one is moved down here so it can target both
    // the theme colors and the disabled state.
    @include cdk-high-contrast {
      .mat-checkbox-background {
        // Needs to be removed because it hides the checkbox outline.
        background: none;
      }
    }
  
    .mat-checkbox:not(.mat-checkbox-disabled) {
      &.mat-primary .mat-checkbox-ripple .mat-ripple-element {
        background-color: mat-color($primary);
      }
  
      &.mat-accent .mat-checkbox-ripple .mat-ripple-element {
        background-color: mat-color($accent);
      }
  
      &.mat-warn .mat-checkbox-ripple .mat-ripple-element {
        background-color: mat-color($warn);
      }
    }
  }
// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($my-app-theme);